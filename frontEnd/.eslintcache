[{"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js":"1","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js":"2","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js":"3","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"5","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"6","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"7","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js":"8","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js":"9","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"10","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"11","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"12","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"13","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"14"},{"size":500,"mtime":1607098809720,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607098809721,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1607351945887,"results":"18","hashOfConfig":"16"},{"size":2956,"mtime":1607352127002,"results":"19","hashOfConfig":"16"},{"size":582,"mtime":1607352126986,"results":"20","hashOfConfig":"16"},{"size":2124,"mtime":1607351946402,"results":"21","hashOfConfig":"16"},{"size":1078,"mtime":1607179666258,"results":"22","hashOfConfig":"16"},{"size":606,"mtime":1607352126957,"results":"23","hashOfConfig":"16"},{"size":629,"mtime":1607167003890,"results":"24","hashOfConfig":"16"},{"size":9465,"mtime":1607352126946,"results":"25","hashOfConfig":"16"},{"size":688,"mtime":1607351946400,"results":"26","hashOfConfig":"16"},{"size":285,"mtime":1607351946401,"results":"27","hashOfConfig":"16"},{"size":1433,"mtime":1607351985927,"results":"28","hashOfConfig":"16"},{"size":938,"mtime":1607354298154,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1plwu4b",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js",[],["67","68"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js",["69","70"],"import { WindowScrollController } from \"@fullcalendar/react\";\nimport React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport NavBar from \"../components/NavBar\";\nimport DiaryContainer from \"./DiaryContainer\";\nimport EntryContainer from \"./EntryContainer\";\nimport MeditationContainer from \"./MeditationContainer\";\nimport Request from \"../helpers/request\";\n\nconst MainContainer = () => {\n\n    const[todayState, setTodayState] = useState([]);\n\n    const[showHide, setShowHide] = useState(\n        {\n            showMakeEntry:true,\n            showDailyStats:false\n        }\n    )\n\n    const requestToday = function(){\n        const request = new Request();\n        const today = new Date();\n        const todayFormat = `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;\n        const todayPromise = request.get(`/entries/date/${todayFormat}`);\n\n        Promise.all([todayPromise])\n        .then((data) => {\n            setTodayState(data[0]);\n        })\n        .catch()\n    }\n\n\n\n    const handleMakeEntry = function(event){\n        event.preventDefault();\n        window.location=\"/entry\";\n    }\n\n    useEffect( () => {\n        requestToday();\n    },[])\n\n    useEffect(function viewSwitch(){\n\n        if(todayState.length > 0) {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = false;\n            showHideCopy['showDailyStats'] = true;\n            setShowHide(showHideCopy);\n        } else {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = true;\n            showHideCopy['showDailyStats'] = false;\n            setShowHide(showHideCopy);\n        }\n    },[todayState])\n\n    return(\n\n        <Router>\n            <>\n            <NavBar className=\"nav-bar\"/>\n            <div className=\"main-content\">\n            <Switch>\n\n                <Route path=\"/diary\" component={DiaryContainer} />\n\n                <Route path=\"/entry\" render={ () => {\n                    return <EntryContainer todayState={todayState}/>\n                }} />\n\n\n                <Route path=\"/meditation\" component={MeditationContainer} />\n                <Route render={ () => {\n                    return(\n                        <div>\n                        <h2>Good morning!</h2>\n                        {showHide.showMakeEntry ? \n                        <button onClick={handleMakeEntry}>Start your day with an entry</button>\n                        : null }\n\n                        {showHide.showDailyStats ? \n                            <div>\n                            <h3>Here are your daily stats: </h3>\n                            <p>blah blah</p>\n                            </div>\n                            : null }\n                        </div>\n                    )\n                }} />\n\n            </Switch>\n            </div>\n            </>\n        </Router>\n\n    )\n}\n\nexport default MainContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",["71"],"import React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport DiaryDisplay from \"../components/Diary/DiaryDisplay\";\nimport Request from \"../helpers/request\";\nimport EntryDetail from \"../components/Entry/EntryDetail\"\n\n\nconst DiaryContainer = () => {\n\n    const[diary, setDiary] = useState([]);\n    const[entry, setEntry] = useState([]);\n\n    const requestAll = function(){\n        const request = new Request();\n        const diaryPromise = request.get(\"/diary\");\n        const entryPromise = request.get(\"/entries\");\n\n        Promise.all([diaryPromise, entryPromise])\n        .then((data)=> {\n            setDiary(data[0]);\n            setEntry(data[1]);\n        })\n    }\n    \n    useEffect( () => {\n        requestAll();\n    },[])\n\n\n    const findEntryById = function(id) {\n        return entry.find((entrySearch) => {\n            return entrySearch.id === parseInt(id);\n        })\n    }\n\n    const handleEntryClick = function(info){\n        let id = info.event._def.extendedProps.id;\n        const url = \"/entries/\" + id;\n        const request = new Request();\n        request.patch(\"/api/entries/\" + id, info.event._def.extendedProps)\n        .then(() => {window.location='/diary/' + id})\n\n    }\n\n\n\n    return(\n        // <p>I am the Diary container. I AM THE MASTER!</p>\n        // // search bar\n        // // calendar view\n        //     // list of days\n        //         // day component\n                \n        <Router>\n            <>\n            <Switch>\n\n                <Route exact path=\"/diary/:id\" render={ (props) => {\n                    const id = props.match.params.id;\n                    const entry = findEntryById(id);\n                    return <EntryDetail entry={entry}/>\n                 }} />\n\n                {/* default view */}\n                <Route render={ () => {\n                    // return <CalendarView />\n                    return <DiaryDisplay diary={diary} handleEntryClick={handleEntryClick}/>\n                }} />\n\n            </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default DiaryContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["72","73","74","75"],"import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Request from \"../helpers/request\";\nimport MeditationSetup from \"../components/Meditation/MeditationSetup\";\nimport MeditationDisplay from \"../components/Meditation/MeditationDisplay\";\nimport sparrows from \"../assets/sparrows.wav\";\n\n\nconst MeditationContainer = () => {\n\n    const[timer,setTimer] = useState(0);\n\n    const audioSparrows = new Audio(sparrows)\n    let sounds = [audioSparrows];\n    const[audio,setAudio] = useState(sounds[0]);\n    \n\n    return(\n        // set up screen (choose length, audio, video)\n        // meditation screen\n\n        <Router>\n            <>\n            <Switch>\n\n            <Route path=\"/meditation/start\" render={ () => {\n                return <MeditationDisplay length={timer} audio={audio}/>\n            }}/>\n\n            <Route render={ () => {\n                return <MeditationSetup />\n            }}/>\n\n            </Switch>\n            </>\n        </Router>\n\n\n    )\n}\n\nexport default MeditationContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["76"],"import React, {useState, useEffect} from \"react\";\nimport \"./EntryForm.css\";\n\n\nconst EntryForm = ({onCreate}) => {\n\n\n\n    const[entry, setEntry] = useState(\n        {\n            // date: null,\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let moodCopy = {...mood};\n        moodCopy[fieldName].push(value);\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n\n        if(sleep.sleepQuality){\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);}\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <div className=\"entry-form\">\n        <form onSubmit={handleSubmit} >\n            <div style={{display:question[0]}} className=\"question-set\">\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange} required></input>\n                <br/>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange} defaultValue=\"Restful\">\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"No\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}} className=\"question-set\">\n                <label>Did you have any dreams?</label>\n                <br/>\n                <textarea type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream} id=\"dream-box\" rows=\"9\" cols=\"35\"></textarea>\n            </div>\n\n            <div style={{display:question[2]}} className=\"question-set\">\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}} className=\"question-set\">\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}} className=\"question-set\">\n                <label>How do you visualise the rest of the day going?</label>\n                <br/>\n                <textarea type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt} id=\"prompt-box\" rows=\"9\" cols=\"35\"/>\n                <br/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </div>\n    )\n\n}\n\nexport default EntryForm;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["77","78","79","80"],"import React, {useState, useEffect} from \"react\";\nimport \"./Animation.css\"\nimport forest from \"../../assets/Forest.jpg\"\nimport ball from \"../../assets/Ball.jpg\"\nimport ball1 from \"../../assets/Ball1.jpg\"\n\n\n\n\n\nconst MeditationDisplay = ({timer,audio}) => {\n\n    // useEffect( () => {\n    //     audio.play();\n    // },[])\n\n\n\n\n    \n\n    return(\n        <>\n            <p1>MeditationDisplay</p1>\n            <audio src={audio} loop />\n            <img className = \"ball\" src={ball} alt=\"ball\" />\n            <p className =\"breath\" id=\"in\">Breath In</p>\n            <p className =\"breath\" id=\"out\">BreathOut</p>\n\n            \n\n        </>\n        \n    )\n}\n\n\n\nexport default MeditationDisplay;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["81","82"],"import React, {useState, useEffect} from \"react\";\nimport MeditationDisplay from \"./MeditationDisplay\"\n\n\nconst MeditationSetup = () => {\n\n    return(\n\n        <>\n        <p>MeditationSetup</p>\n        <MeditationDisplay />\n\n\n        </>\n        \n    )\n}\n\nexport default MeditationSetup;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",["83","84","85","86","87","88"],"import React from \"react\";\n\n\nconst EntryDetail =  ({entry}) => {\n\n    if(!entry){\n        return (\n            <p>Loading...</p>\n        )\n    }\n\n    let meditation = \"\"\n\n    if(entry.meditation.completed){\n        meditation = \"Great job keeping up with meditating today! That's \" + entry.meditation.length + \" minutes of tranquility.\"\n    } else {\n       meditation = \"Would you like to do some meditation today?\"\n    }\n\n    let sleepQuality = \"\"\n\n    if(entry.sleep.sleepQuality  == \"Restful\") {\n        sleepQuality = \"got a restful sleep.\"\n    } else if(entry.sleep.sleepQuality  == \"WokeOnce\" ) {\n        sleepQuality = \"woke once during the night.\"\n    } else if (entry.sleep.sleepQuality == \"WokeTwice\") {\n        sleepQuality = \"woke twice during the night.\"\n    } else if (entry.sleep.sleepQuality == \"Restless\") {\n        sleepQuality = \"had a pretty restless night.\"\n    } else if (entry.sleep.sleepQuality == \"Bad\") {\n        sleepQuality = \"had a particularly bad night.\"\n    } else if (entry.sleep.sleepQuality == \"No\") {\n        sleepQuality = \"did not sleep a wink!\"\n    }\n    \n    return (\n        <>\n        <div className = \"entryDetail\">\n        <h1>Your Diary on {entry.date}</h1>\n        <h4>You recorded: {entry.prompt}</h4>\n        <p>On this day you got {entry.sleep.hours} hours of sleep and you {sleepQuality}</p>\n        <p>{meditation}</p>\n        </div>\n        </>\n    )\n}\n\nexport default EntryDetail;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",["89"],"import React from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport EntryDetail from \"../Entry/EntryDetail\"\n\nconst DiaryDisplay = ({diary, handleEntryClick}) => {\n\n  const events = []\n\n  if (diary[0] !== undefined){\n    diary[0].entries.forEach(entry => {\n      let newCell = {title: entry.prompt.toString(),\n        date: entry.date.toString(),\n        id: entry.id, \n        allDay: true,\n        extendedProps: {...entry}\n      }\n        \n      events.push(newCell)\n    })}\n\n    const handleEventClick = function(eventClickInfo){\n      handleEntryClick(eventClickInfo)\n    }\n  \n      \n    \n  return(  <FullCalendar className =\"Full-Calendar\"\n    plugins={[ dayGridPlugin, interactionPlugin ]}\n    initialView=\"dayGridMonth\" \n    events={events} eventClick={handleEventClick} /> \n  )\n\n}\n\nexport default DiaryDisplay;",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":32},{"ruleId":"98","severity":1,"message":"99","line":58,"column":7,"nodeType":"100","endLine":58,"endColumn":19,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"102","line":38,"column":15,"nodeType":"96","messageId":"97","endLine":38,"endColumn":18},{"ruleId":"94","severity":1,"message":"103","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"104","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":15},{"ruleId":"94","severity":1,"message":"105","line":11,"column":17,"nodeType":"96","messageId":"97","endLine":11,"endColumn":25},{"ruleId":"94","severity":1,"message":"106","line":15,"column":17,"nodeType":"96","messageId":"97","endLine":15,"endColumn":25},{"ruleId":"98","severity":1,"message":"107","line":45,"column":7,"nodeType":"100","endLine":45,"endColumn":19,"suggestions":"108"},{"ruleId":"94","severity":1,"message":"109","line":1,"column":16,"nodeType":"96","messageId":"97","endLine":1,"endColumn":24},{"ruleId":"94","severity":1,"message":"103","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"110","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"94","severity":1,"message":"111","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":13},{"ruleId":"94","severity":1,"message":"109","line":1,"column":16,"nodeType":"96","messageId":"97","endLine":1,"endColumn":24},{"ruleId":"94","severity":1,"message":"103","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"112","severity":1,"message":"113","line":22,"column":34,"nodeType":"114","messageId":"115","endLine":22,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":24,"column":41,"nodeType":"114","messageId":"115","endLine":24,"endColumn":43},{"ruleId":"112","severity":1,"message":"113","line":26,"column":41,"nodeType":"114","messageId":"115","endLine":26,"endColumn":43},{"ruleId":"112","severity":1,"message":"113","line":28,"column":41,"nodeType":"114","messageId":"115","endLine":28,"endColumn":43},{"ruleId":"112","severity":1,"message":"113","line":30,"column":41,"nodeType":"114","messageId":"115","endLine":30,"endColumn":43},{"ruleId":"112","severity":1,"message":"113","line":32,"column":41,"nodeType":"114","messageId":"115","endLine":32,"endColumn":43},{"ruleId":"94","severity":1,"message":"116","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":19},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["119"],"'url' is assigned a value but never used.","'useEffect' is defined but never used.","'Request' is defined but never used.","'setTimer' is assigned a value but never used.","'setAudio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["120"],"'useState' is defined but never used.","'forest' is defined but never used.","'ball1' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'EntryDetail' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [showHide, todayState]",{"range":"125","text":"126"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"127","text":"128"},[1713,1725],"[showHide, todayState]",[866,878],"[sleep, mood, entry]"]
[{"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/index.js":"1","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/reportWebVitals.js":"2","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/App.js":"3","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"5","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"6","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/NavBar.js":"7","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"8","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"9","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/helpers/request.js":"10","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"11","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"13","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"14"},{"size":500,"mtime":1607098648483,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607098648484,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1607352440194,"results":"18","hashOfConfig":"16"},{"size":2956,"mtime":1607352522804,"results":"19","hashOfConfig":"16"},{"size":1078,"mtime":1607192527797,"results":"20","hashOfConfig":"16"},{"size":582,"mtime":1607352522803,"results":"21","hashOfConfig":"16"},{"size":606,"mtime":1607352522802,"results":"22","hashOfConfig":"16"},{"size":2127,"mtime":1607384853124,"results":"23","hashOfConfig":"16"},{"size":254,"mtime":1607384853123,"results":"24","hashOfConfig":"16"},{"size":629,"mtime":1607192527797,"results":"25","hashOfConfig":"16"},{"size":2066,"mtime":1607384853123,"results":"26","hashOfConfig":"16"},{"size":9465,"mtime":1607369392460,"results":"27","hashOfConfig":"16"},{"size":1107,"mtime":1607384853122,"results":"28","hashOfConfig":"16"},{"size":3738,"mtime":1607384853123,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mwr5qr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/index.js",[],["64","65"],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/App.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MainContainer.js",["66","67"],"import { WindowScrollController } from \"@fullcalendar/react\";\nimport React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport NavBar from \"../components/NavBar\";\nimport DiaryContainer from \"./DiaryContainer\";\nimport EntryContainer from \"./EntryContainer\";\nimport MeditationContainer from \"./MeditationContainer\";\nimport Request from \"../helpers/request\";\n\nconst MainContainer = () => {\n\n    const[todayState, setTodayState] = useState([]);\n\n    const[showHide, setShowHide] = useState(\n        {\n            showMakeEntry:true,\n            showDailyStats:false\n        }\n    )\n\n    const requestToday = function(){\n        const request = new Request();\n        const today = new Date();\n        const todayFormat = `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;\n        const todayPromise = request.get(`/entries/date/${todayFormat}`);\n\n        Promise.all([todayPromise])\n        .then((data) => {\n            setTodayState(data[0]);\n        })\n        .catch()\n    }\n\n\n\n    const handleMakeEntry = function(event){\n        event.preventDefault();\n        window.location=\"/entry\";\n    }\n\n    useEffect( () => {\n        requestToday();\n    },[])\n\n    useEffect(function viewSwitch(){\n\n        if(todayState.length > 0) {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = false;\n            showHideCopy['showDailyStats'] = true;\n            setShowHide(showHideCopy);\n        } else {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = true;\n            showHideCopy['showDailyStats'] = false;\n            setShowHide(showHideCopy);\n        }\n    },[todayState])\n\n    return(\n\n        <Router>\n            <>\n            <NavBar className=\"nav-bar\"/>\n            <div className=\"main-content\">\n            <Switch>\n\n                <Route path=\"/diary\" component={DiaryContainer} />\n\n                <Route path=\"/entry\" render={ () => {\n                    return <EntryContainer todayState={todayState}/>\n                }} />\n\n\n                <Route path=\"/meditation\" component={MeditationContainer} />\n                <Route render={ () => {\n                    return(\n                        <div>\n                        <h2>Good morning!</h2>\n                        {showHide.showMakeEntry ? \n                        <button onClick={handleMakeEntry}>Start your day with an entry</button>\n                        : null }\n\n                        {showHide.showDailyStats ? \n                            <div>\n                            <h3>Here are your daily stats: </h3>\n                            <p>blah blah</p>\n                            </div>\n                            : null }\n                        </div>\n                    )\n                }} />\n\n            </Switch>\n            </div>\n            </>\n        </Router>\n\n    )\n}\n\nexport default MainContainer;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["68","69","70","71"],"import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Request from \"../helpers/request\";\nimport MeditationSetup from \"../components/Meditation/MeditationSetup\";\nimport MeditationDisplay from \"../components/Meditation/MeditationDisplay\";\nimport sparrows from \"../assets/sparrows.wav\";\n\n\nconst MeditationContainer = () => {\n\n    const[timer,setTimer] = useState(0);\n\n    const audioSparrows = new Audio(sparrows)\n    let sounds = [audioSparrows];\n    const[audio,setAudio] = useState(sounds[0]);\n    \n\n    return(\n        // set up screen (choose length, audio, video)\n        // meditation screen\n\n        <Router>\n            <>\n            <Switch>\n\n            <Route path=\"/meditation/start\" render={ () => {\n                return <MeditationDisplay length={timer} audio={audio}/>\n            }}/>\n\n            <Route render={ () => {\n                return <MeditationSetup />\n            }}/>\n\n            </Switch>\n            </>\n        </Router>\n\n\n    )\n}\n\nexport default MeditationContainer;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",["72"],"import React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport DiaryDisplay from \"../components/Diary/DiaryDisplay\";\nimport Request from \"../helpers/request\";\nimport EntryDetail from \"../components/Entry/EntryDetail\"\n\n\nconst DiaryContainer = () => {\n\n    const[diary, setDiary] = useState([]);\n    const[entry, setEntry] = useState([]);\n\n    const requestAll = function(){\n        const request = new Request();\n        const diaryPromise = request.get(\"/diary\");\n        const entryPromise = request.get(\"/entries\");\n\n        Promise.all([diaryPromise, entryPromise])\n        .then((data)=> {\n            setDiary(data[0]);\n            setEntry(data[1]);\n        })\n    }\n    \n    useEffect( () => {\n        requestAll();\n    },[])\n\n\n    const findEntryById = function(id) {\n        return entry.find((entrySearch) => {\n            return entrySearch.id === parseInt(id);\n        })\n    }\n\n    const handleEntryClick = function(info){\n        let id = info.event._def.extendedProps.id;\n        // const url = \"/entries/\" + id;\n        const request = new Request();\n        request.patch(\"/api/entries/\" + id, info.event._def.extendedProps)\n        .then(() => {window.location='/diary/' + id})\n\n    }\n\n\n\n    return(\n        // <p>I am the Diary container. I AM THE MASTER!</p>\n        // // search bar\n        // // calendar view\n        //     // list of days\n        //         // day component\n                \n        <Router>\n            <>\n            <Switch>\n\n                <Route exact path=\"/diary/:id\" render={ (props) => {\n                    const id = props.match.params.id;\n                    const entry = findEntryById(id);\n                    return <EntryDetail entry={entry}/>\n                 }} />\n\n                {/* default view */}\n                <Route render={ () => {\n                    // return <CalendarView />\n                    return <DiaryDisplay diary={diary} handleEntryClick={handleEntryClick}/>\n                }} />\n\n            </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default DiaryContainer;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["73","74"],"import React, {useState, useEffect} from \"react\";\nimport MeditationDisplay from \"./MeditationDisplay\"\n\n\nconst MeditationSetup = () => {\n\n    return(\n\n        <>\n        <MeditationDisplay />\n\n\n        </>\n        \n    )\n}\n\nexport default MeditationSetup;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["75","76","77","78","79"],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["80"],"import React, {useState, useEffect} from \"react\";\nimport \"./EntryForm.css\";\n\n\nconst EntryForm = ({onCreate}) => {\n\n\n\n    const[entry, setEntry] = useState(\n        {\n            // date: null,\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let moodCopy = {...mood};\n        moodCopy[fieldName].push(value);\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n\n        if(sleep.sleepQuality){\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);}\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <div className=\"entry-form\">\n        <form onSubmit={handleSubmit} >\n            <div style={{display:question[0]}} className=\"question-set\">\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange} required></input>\n                <br/>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange} defaultValue=\"Restful\">\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"No\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}} className=\"question-set\">\n                <label>Did you have any dreams?</label>\n                <br/>\n                <textarea type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream} id=\"dream-box\" rows=\"9\" cols=\"35\"></textarea>\n            </div>\n\n            <div style={{display:question[2]}} className=\"question-set\">\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}} className=\"question-set\">\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}} className=\"question-set\">\n                <label>How do you visualise the rest of the day going?</label>\n                <br/>\n                <textarea type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt} id=\"prompt-box\" rows=\"9\" cols=\"35\"/>\n                <br/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </div>\n    )\n\n}\n\nexport default EntryForm;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":32},{"ruleId":"89","severity":1,"message":"90","line":58,"column":7,"nodeType":"91","endLine":58,"endColumn":19,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":1,"column":26,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"85","severity":1,"message":"94","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"95","line":11,"column":17,"nodeType":"87","messageId":"88","endLine":11,"endColumn":25},{"ruleId":"85","severity":1,"message":"96","line":15,"column":17,"nodeType":"87","messageId":"88","endLine":15,"endColumn":25},{"ruleId":"85","severity":1,"message":"97","line":38,"column":15,"nodeType":"87","messageId":"88","endLine":38,"endColumn":18},{"ruleId":"85","severity":1,"message":"98","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":24},{"ruleId":"85","severity":1,"message":"93","line":1,"column":26,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"85","severity":1,"message":"98","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":24},{"ruleId":"85","severity":1,"message":"93","line":1,"column":26,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"85","severity":1,"message":"99","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":14},{"ruleId":"85","severity":1,"message":"100","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":12},{"ruleId":"85","severity":1,"message":"101","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":13},{"ruleId":"89","severity":1,"message":"102","line":45,"column":7,"nodeType":"91","endLine":45,"endColumn":19,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["106"],"'useEffect' is defined but never used.","'Request' is defined but never used.","'setTimer' is assigned a value but never used.","'setAudio' is assigned a value but never used.","'url' is assigned a value but never used.","'useState' is defined but never used.","'forest' is defined but never used.","'ball' is defined but never used.","'ball1' is defined but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [showHide, todayState]",{"range":"112","text":"113"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"114","text":"115"},[1713,1725],"[showHide, todayState]",[866,878],"[sleep, mood, entry]"]
