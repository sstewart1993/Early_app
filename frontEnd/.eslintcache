[{"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/index.js":"1","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/App.js":"2","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/reportWebVitals.js":"3","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"5","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"6","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/helpers/request.js":"7","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"8","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/NavBar.js":"9","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"10","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"11","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"13","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"14","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/Details.js":"15","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/Player.js":"16","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationControls.js":"17"},{"size":500,"mtime":1607350835084,"results":"18","hashOfConfig":"19"},{"size":209,"mtime":1607351202692,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1607350835085,"results":"21","hashOfConfig":"19"},{"size":2956,"mtime":1607447589620,"results":"22","hashOfConfig":"19"},{"size":2124,"mtime":1607356092154,"results":"23","hashOfConfig":"19"},{"size":1712,"mtime":1607447841759,"results":"24","hashOfConfig":"19"},{"size":629,"mtime":1607350835084,"results":"25","hashOfConfig":"19"},{"size":582,"mtime":1607356092154,"results":"26","hashOfConfig":"19"},{"size":612,"mtime":1607360326249,"results":"27","hashOfConfig":"19"},{"size":1815,"mtime":1607448005767,"results":"28","hashOfConfig":"19"},{"size":254,"mtime":1607447589617,"results":"29","hashOfConfig":"19"},{"size":9465,"mtime":1607356092153,"results":"30","hashOfConfig":"19"},{"size":999,"mtime":1607356325824,"results":"31","hashOfConfig":"19"},{"size":678,"mtime":1607356092152,"results":"32","hashOfConfig":"19"},{"size":250,"mtime":1607447876081,"results":"33","hashOfConfig":"19"},{"size":1603,"mtime":1607447758353,"results":"34","hashOfConfig":"19"},{"size":816,"mtime":1607447779520,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1jqoqpj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/index.js",[],["74","75"],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/App.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/MainContainer.js",["76","77"],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",["78"],"import React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport DiaryDisplay from \"../components/Diary/DiaryDisplay\";\nimport Request from \"../helpers/request\";\n\nconst DiaryContainer = () => {\n\n    const[diary, setDiary] = useState([]);\n\n    const requestAll = function(){\n        const request = new Request();\n        const diaryPromise = request.get(\"/diary\");\n\n        Promise.all([diaryPromise])\n        .then((data)=> {\n            setDiary(data[0]);\n        })\n    }\n    \n    useEffect( () => {\n        requestAll();\n    },[])\n\n\n    const findEntryById = function(id) {\n        return diary.find((entry) => {\n            return entry.id === parseInt(id);\n        })\n    }\n\n    return(\n        // <p>I am the Diary container. I AM THE MASTER!</p>\n        // // search bar\n        // // calendar view\n        //     // list of days\n        //         // day component\n                \n        <Router>\n            <>\n            <Switch>\n\n                <Route exact path=\"/diary/:id\" render={ (props) => {\n                    const id = props.match.params.id;\n                    const entry = findEntryById(id);\n                    // return <EntryDetail entry={entry} />\n                    return <p>EntryDetail goes here</p>\n                }} />\n\n                {/* default view */}\n                <Route render={ () => {\n                    // return <CalendarView />\n                    return <DiaryDisplay/>\n                }} />\n\n            </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default DiaryContainer;","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["79","80"],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["81","82"],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["83","84"],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["85"],"import React, {useState, useEffect} from \"react\";\n\n<<<<<<< HEAD\nconst EntryForm = () => {\n=======\n// COMMENT COMMENT COMMENT\n\nconst EntryForm = ({onCreate}) => {\n\n\n>>>>>>> c1ec18fdd4f946f05385b5d23c05c86a9448e38d\n\n    const[entry, setEntry] = useState(\n        {\n            date: String(Date.now()),\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let moodCopy = {...mood};\n        moodCopy[fieldName].push(value);\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <>\n        <form onSubmit={handleSubmit}>\n            <div style={{display:question[0]}}>\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange}></input>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange}>\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"NoSleep\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}}>\n                <label>Did you have any dreams?</label>\n                <input type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream}></input>\n            </div>\n\n            <div style={{display:question[2]}}>\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travel\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}}>\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travel\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}}>\n                <label>How do you visualise the rest of the day going?</label>\n                <input type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt}/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </>\n    )\n\n}\n\nexport default EntryForm;","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",["86","87"],"import React from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport EntryDetail from \"../Entry/EntryDetail\"\n\nconst DiaryDisplay = ({diary, handleEntryClick}) => {\n\n  const events = []\n\n  if (diary[0] != undefined){\n    diary[0].entries.forEach(entry => {\n      let newCell = {title: entry.prompt.toString(),\n        date: entry.date.toString(),\n        id: entry.id, \n        allDay: true,\n        extendedProps: {...entry}\n      }\n        \n      events.push(newCell)\n    })}\n\n    const handleEventClick = function(eventClickInfo){\n      console.log(\"event CLICKED. Event ID\" + eventClickInfo)\n      handleEntryClick(eventClickInfo)\n    }\n  \n      \n    \n  return(  <FullCalendar className =\"Full-Calendar\"\n    plugins={[ dayGridPlugin, interactionPlugin ]}\n    initialView=\"dayGridMonth\" \n    events={events} eventClick={handleEventClick} /> \n  )\n\n}\n\nexport default DiaryDisplay;","/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/Details.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/Player.js",[],"/Users/codeclanstudent/codeclan_work/homework_folder/java_project/mindfullness_app/frontEnd/src/components/Meditation/MeditationControls.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":32},{"ruleId":"96","severity":1,"message":"97","line":58,"column":7,"nodeType":"98","endLine":58,"endColumn":19,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"100","line":38,"column":15,"nodeType":"94","messageId":"95","endLine":38,"endColumn":18},{"ruleId":"92","severity":1,"message":"101","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":15},{"ruleId":"96","severity":1,"message":"102","line":43,"column":8,"nodeType":"98","endLine":43,"endColumn":26,"suggestions":"103"},{"ruleId":"92","severity":1,"message":"104","line":1,"column":16,"nodeType":"94","messageId":"95","endLine":1,"endColumn":24},{"ruleId":"92","severity":1,"message":"105","line":1,"column":26,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"92","severity":1,"message":"104","line":1,"column":16,"nodeType":"94","messageId":"95","endLine":1,"endColumn":24},{"ruleId":"92","severity":1,"message":"105","line":1,"column":26,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"96","severity":1,"message":"106","line":45,"column":7,"nodeType":"98","endLine":45,"endColumn":19,"suggestions":"107"},{"ruleId":"92","severity":1,"message":"108","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":19},{"ruleId":"109","severity":1,"message":"110","line":11,"column":16,"nodeType":"111","messageId":"112","endLine":11,"endColumn":18},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'url' is assigned a value but never used.","'Details' is defined but never used.","React Hook useEffect has a missing dependency: 'songs.length'. Either include it or remove the dependency array.",["116"],"'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["117"],"'EntryDetail' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [showHide, todayState]",{"range":"124","text":"125"},"Update the dependencies array to be: [currentSongIndex, songs.length]",{"range":"126","text":"127"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"128","text":"129"},[1713,1725],"[showHide, todayState]",[1159,1177],"[currentSongIndex, songs.length]",[866,878],"[sleep, mood, entry]"]