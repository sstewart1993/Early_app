[{"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js":"1","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js":"2","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js":"3","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"5","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"6","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js":"7","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"8","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js":"9","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"10","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"11","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"13"},{"size":500,"mtime":1607098809720,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607098809721,"results":"16","hashOfConfig":"15"},{"size":209,"mtime":1607457678658,"results":"17","hashOfConfig":"15"},{"size":3204,"mtime":1607515884478,"results":"18","hashOfConfig":"15"},{"size":582,"mtime":1607457679611,"results":"19","hashOfConfig":"15"},{"size":2577,"mtime":1607515884479,"results":"20","hashOfConfig":"15"},{"size":629,"mtime":1607457679666,"results":"21","hashOfConfig":"15"},{"size":2644,"mtime":1607514214227,"results":"22","hashOfConfig":"15"},{"size":628,"mtime":1607515884478,"results":"23","hashOfConfig":"15"},{"size":1143,"mtime":1607516254102,"results":"24","hashOfConfig":"15"},{"size":15366,"mtime":1607515462328,"results":"25","hashOfConfig":"15"},{"size":9677,"mtime":1607515884436,"results":"26","hashOfConfig":"15"},{"size":2125,"mtime":1607515884477,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"cl4yom",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js",[],["56","57"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js",["58","59"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["60","61","62","63"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",["64"],"import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport \"./EntryDetail.css\";\n\nconst EntryDetail =  ({entry, sleep, mood, onUpdate, onDelete}) => {\n\n  \n\n    const[stateEntry, setStateEntry] = useState(\n        {\n            // date: null,\n            sleep: {\n            },\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[stateSleep, setStateSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[stateMood,setStateMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( ()=> {\n        // console.log(mood)\n        if(entry){\n        let entryCopy = {...entry}\n        setStateEntry(entryCopy);\n        let moodCopy = {...entry.mood}\n        setStateMood(moodCopy);\n        let dreamCopy = {...entry.sleep};\n        setStateSleep(dreamCopy);}\n    } , [entry, mood, sleep])\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...stateMood}\n        entryCopy[\"sleep\"] = {...stateSleep}\n        setStateEntry(entryCopy);\n    },[stateSleep,stateMood])\n\n\n    if(!entry){\n        return (\n            <p>Loading...</p>\n        )\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let copiedEntry = {...stateEntry}\n        copiedEntry[propertyName] = event.target.value;\n        setStateEntry(copiedEntry)}\n\n    const handleDelete = function(){\n        debugger;\n        let id = entry.id;\n        onDelete(id);\n    }\n\n    const handleSubmit = function(event){\n        event.preventDefault();\n        let stateEntryCopy = {...stateEntry}\n        // these two lines may be redundant. need to check!\n        stateEntryCopy[\"mood\"] = {...stateMood}\n        stateEntryCopy[\"sleep\"] = {...stateSleep}\n        onUpdate(stateEntryCopy)\n    }\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...stateMood};\n        moodCopy[propertyName] = event.target.value;\n        setStateMood(moodCopy);\n\n        // setStateEntry(prevStateEntry => ({\n        //     ...prevStateEntry, mood: {...prevStateEntry.mood, mood}\n        // }))\n    }\n    \n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...stateSleep};\n        sleepCopy[propertyName] = event.target.value;\n        setStateSleep(sleepCopy);\n\n        // setStateEntry(stateEntry => ({\n        //     ...stateEntry, sleep: {...stateEntry.sleep, sleep}\n        // }))\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let check = event.target.checked;\n        let moodCopy = {...stateMood};\n        if(check === true){\n            moodCopy[fieldName].push(value);\n        }else{\n            const index = moodCopy[fieldName].indexOf(value);\n            moodCopy[fieldName].splice(index,1);\n        }\n        setStateMood(moodCopy);\n    }\n\n    const handleMeditationChange = function(event){\n        let minsMeditated = event.target.value;\n        let entryCopy = {...stateEntry};\n        if(minsMeditated > 0){\n            entryCopy.meditation.completed = true;\n        } else {\n            entryCopy.meditation.completed = false;\n        }\n        entryCopy.meditation.length = minsMeditated;\n        setStateEntry(entryCopy);\n    }\n\n    const mindReasonSelected = stateMood.mindReason;\n    const bodyReasonSelected = stateMood.bodyReason;\n\n    \n    \n    \n    return (\n        <div className = \"entry-detail\">\n        <h1>Your Diary on {entry.date}</h1>\n\n        <button onClick={handleDelete}>Delete</button>\n        <form onSubmit={handleSubmit}>\n            <label for=\"prompt\">Prompt: </label>\n            <input type=\"text\" name=\"prompt\" defaultValue={entry.prompt} placeholder={entry.prompt} onChange={handleChange} className=\"prompt\"></input>\n            \n            <div className = \"sleep-info\">\n                <h2>Sleep Info</h2>\n                    <label for=\"dream\">Dream Diary:</label>\n                    <input type=\"text\" name=\"dream\" defaultValue={entry.sleep.dream} placeholder={entry.sleep.dream} onChange={handleSleepChange}></input>\n                    <label for=\"hours\">Hours of Sleep: </label>\n                    <input type=\"number\" name=\"hours\" defaultValue={entry.sleep.hours} placeholder={entry.sleep.hours} onChange={handleSleepChange}></input>\n                    <label>Sleep Quality:</label>\n                    <select select name=\"sleepQuality\" defaultValue={entry.sleep.sleepQuality} onChange={handleSleepChange}>\n                        <option value=\"Restful\">Very Restful</option>\n                        <option value=\"WokeOnce\">I woke up once</option>\n                        <option value=\"WokeTwice\">I woke up twice</option>\n                        <option value=\"RestLess\">I was pretty restless</option>\n                        <option value=\"Bad\">I had a bad night's sleep</option>\n                        <option value=\"No\">I didn't sleep at all</option>\n                    </select>\n                    </div>\n            <div className=\"mood-info\">\n                <h2>Mood Info</h2>\n                    <label>You rated your mind at: {stateEntry.mood.mindScore}/10</label>\n                    <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={stateEntry.mood.mindScore} name=\"mindScore\"/>\n            \n            <h5><label>You checked the following contributing reasons for rating your mind this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n                    {mindReasonSelected.includes(\"Work\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange} checked/>:\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange} /> }\n                        \n                        <label for=\"mind-work\">work</label>\n\n                    {mindReasonSelected.includes(\"Family\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-family\">family</label>\n\n                    {mindReasonSelected.includes(\"Relationship\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-relationship\">relationships</label>\n\n                    {mindReasonSelected.includes(\"Education\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange} />}\n                        \n                        <label for=\"mind-education\">education</label>\n\n                    {mindReasonSelected.includes(\"Food\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-food\">food</label>\n\n                    {mindReasonSelected.includes(\"Travelling\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}  />}\n\n                        \n                        <label for=\"mind-travel\">travel</label>\n\n                    {mindReasonSelected.includes(\"Friends\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange} />}\n        \n                        <label for=\"mind-friends\">friends</label>\n\n                    {mindReasonSelected.includes(\"Exercise\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-exercise\">exercise</label>\n\n                    {mindReasonSelected.includes(\"Body\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}  />}\n\n                        \n                        <label for=\"mind-body\">body</label>\n\n                    {mindReasonSelected.includes(\"Covid\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-covid\">covid</label>\n\n                    {mindReasonSelected.includes(\"DontKnow\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} />}\n\n                        <label for=\"mind-dont-know\">I don't know</label>\n\n                    </div>\n\n                <label>You rated your body at: {stateEntry.mood.bodyScore}/10</label>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={stateEntry.mood.bodyScore} name=\"bodyScore\"/>\n            \n            <h5><label>You checked the following contributing reasons for rating your body this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n\n                {bodyReasonSelected.includes(\"Work\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange} checked/> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>}\n                    \n                    <label for=\"body-work\">work</label>\n\n                {bodyReasonSelected.includes(\"Family\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-family\">family</label>\n\n                {bodyReasonSelected.includes(\"Relationship\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-relationship\">relationships</label>\n\n                {bodyReasonSelected.includes(\"Education\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-education\">education</label>\n\n                {bodyReasonSelected.includes(\"Food\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-food\">food</label>\n\n                {bodyReasonSelected.includes(\"Travelling\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange} />}\n                    \n                    <label for=\"body-travel\">travel</label>\n\n                {bodyReasonSelected.includes(\"Friends\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-friends\">friends</label>\n\n                {bodyReasonSelected.includes(\"Exercise\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-exercise\" >exercise</label>\n\n                {bodyReasonSelected.includes(\"Body\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-body\">body</label>\n\n                {bodyReasonSelected.includes(\"Covid\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-covid\">covid</label>\n\n                {bodyReasonSelected.includes(\"DontKnow\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} checked/> : \n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-dont-know\">I don't know</label>\n\n                    </div>\n                    </div>\n                <div className =\"meditation-info\">\n            <h2>Meditation Info </h2>\n\n            <label>You meditated for </label>\n            <input type=\"number\" defaultValue={entry.meditation.length} onChange={handleMeditationChange}></input>\n            <label>minutes! </label>\n                \n                </div>\n\n            <button type=\"submit\"> Submit </button>\n        </form>\n        </div>\n    )\n}\n\nexport default EntryDetail;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["65"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":59,"column":7,"nodeType":"78","endLine":59,"endColumn":19,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":2,"column":26,"nodeType":"74","messageId":"75","endLine":2,"endColumn":32},{"ruleId":"72","severity":1,"message":"81","line":2,"column":34,"nodeType":"74","messageId":"75","endLine":2,"endColumn":39},{"ruleId":"72","severity":1,"message":"82","line":2,"column":41,"nodeType":"74","messageId":"75","endLine":2,"endColumn":47},{"ruleId":"72","severity":1,"message":"83","line":81,"column":17,"nodeType":"74","messageId":"75","endLine":81,"endColumn":25},{"ruleId":"76","severity":1,"message":"84","line":57,"column":7,"nodeType":"78","endLine":57,"endColumn":29,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"84","line":45,"column":7,"nodeType":"78","endLine":45,"endColumn":19,"suggestions":"86"},{"ruleId":"72","severity":1,"message":"87","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"76","severity":1,"message":"88","line":13,"column":7,"nodeType":"78","endLine":13,"endColumn":9,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'setAudio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["93"],["94"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [showHide, todayState]",{"range":"104","text":"105"},"Update the dependencies array to be: [stateSleep, stateMood, entry]",{"range":"106","text":"107"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"108","text":"109"},"Update the dependencies array to be: [audio]",{"range":"110","text":"111"},[1739,1751],"[showHide, todayState]",[1301,1323],"[stateSleep, stateMood, entry]",[866,878],"[sleep, mood, entry]",[226,228],"[audio]"]