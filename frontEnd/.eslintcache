[{"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js":"1","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js":"2","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js":"3","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"5","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"6","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js":"7","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"8","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js":"9","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"10","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"11","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"13"},{"size":500,"mtime":1607098809720,"results":"14","hashOfConfig":"15"},{"size":208,"mtime":1607166266895,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1607098809721,"results":"17","hashOfConfig":"15"},{"size":2956,"mtime":1607349368797,"results":"18","hashOfConfig":"15"},{"size":1078,"mtime":1607179666258,"results":"19","hashOfConfig":"15"},{"size":582,"mtime":1607349277748,"results":"20","hashOfConfig":"15"},{"size":606,"mtime":1607291790240,"results":"21","hashOfConfig":"15"},{"size":1634,"mtime":1607291790241,"results":"22","hashOfConfig":"15"},{"size":629,"mtime":1607167003890,"results":"23","hashOfConfig":"15"},{"size":167,"mtime":1607172439283,"results":"24","hashOfConfig":"15"},{"size":317,"mtime":1607179966284,"results":"25","hashOfConfig":"15"},{"size":9492,"mtime":1607291790238,"results":"26","hashOfConfig":"15"},{"size":311,"mtime":1607259932677,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1plwu4b",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js",[],["60","61"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js",["62","63"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["64","65","66","67"],"import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Request from \"../helpers/request\";\nimport MeditationSetup from \"../components/Meditation/MeditationSetup\";\nimport MeditationDisplay from \"../components/Meditation/MeditationDisplay\";\nimport sparrows from \"../assets/sparrows.wav\";\n\n\nconst MeditationContainer = () => {\n\n    const[timer,setTimer] = useState(0);\n\n    const audioSparrows = new Audio(sparrows)\n    let sounds = [audioSparrows];\n    const[audio,setAudio] = useState(sounds[0]);\n    \n\n    return(\n        // set up screen (choose length, audio, video)\n        // meditation screen\n\n        <Router>\n            <>\n            <Switch>\n\n            <Route path=\"/meditation/start\" render={ () => {\n                return <MeditationDisplay length={timer} audio={audio}/>\n            }}/>\n\n            <Route render={ () => {\n                return <MeditationSetup />\n            }}/>\n\n            </Switch>\n            </>\n        </Router>\n\n\n    )\n}\n\nexport default MeditationContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",["68"],"import React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport DiaryDisplay from \"../components/Diary/DiaryDisplay\";\nimport Request from \"../helpers/request\";\n\nconst DiaryContainer = () => {\n\n    const[diary, setDiary] = useState([]);\n\n    const requestAll = function(){\n        const request = new Request();\n        const diaryPromise = request.get(\"/diary\");\n\n        Promise.all([diaryPromise])\n        .then((data)=> {\n            setDiary(data[0]);\n        })\n    }\n    \n    useEffect( () => {\n        requestAll();\n    },[])\n\n\n    const findEntryById = function(id) {\n        return diary.find((entry) => {\n            return entry.id === parseInt(id);\n        })\n    }\n\n    return(\n        // <p>I am the Diary container. I AM THE MASTER!</p>\n        // // search bar\n        // // calendar view\n        //     // list of days\n        //         // day component\n                \n        <Router>\n            <>\n            <Switch>\n\n                <Route exact path=\"/diary/:id\" render={ (props) => {\n                    const id = props.match.params.id;\n                    const entry = findEntryById(id);\n                    // return <EntryDetail entry={entry} />\n                    return <p>EntryDetail goes here</p>\n                }} />\n\n                {/* default view */}\n                <Route render={ () => {\n                    // return <CalendarView />\n                    return <DiaryDisplay classname=\"diary-display\"/>\n                }} />\n\n            </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default DiaryContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["69","70"],"import React, {useState, useEffect} from \"react\";\n\nconst MeditationSetup = () => {\n\n    return(\n        <p>MeditationSetup</p>\n    )\n}\n\nexport default MeditationSetup;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["71","72"],"import React, {useState, useEffect} from \"react\";\n\nconst MeditationDisplay = ({timer,audio}) => {\n\n    useEffect( () => {\n        audio.play();\n    },[])\n\n    return(\n        <>\n            <p>MeditationDisplay</p>\n            <audio src={audio} loop />\n        </>\n        \n    )\n}\n\nexport default MeditationDisplay;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["73"],"import React, {useState, useEffect} from \"react\";\nimport \"./EntryForm.css\";\n\n// COMMENT COMMENT COMMENT\n\nconst EntryForm = ({onCreate}) => {\n\n\n\n    const[entry, setEntry] = useState(\n        {\n            // date: null,\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let moodCopy = {...mood};\n        moodCopy[fieldName].push(value);\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n\n        if(sleep.sleepQuality){\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);}\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <div className=\"entry-form\">\n        <form onSubmit={handleSubmit} >\n            <div style={{display:question[0]}} className=\"question-set\">\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange} required></input>\n                <br/>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange} defaultValue=\"Restful\">\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"No\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}} className=\"question-set\">\n                <label>Did you have any dreams?</label>\n                <br/>\n                <textarea type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream} id=\"dream-box\" rows=\"9\" cols=\"35\"></textarea>\n            </div>\n\n            <div style={{display:question[2]}} className=\"question-set\">\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}} className=\"question-set\">\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}} className=\"question-set\">\n                <label>How do you visualise the rest of the day going?</label>\n                <br/>\n                <textarea type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt} id=\"prompt-box\" rows=\"9\" cols=\"35\"/>\n                <br/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </div>\n    )\n\n}\n\nexport default EntryForm;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":32},{"ruleId":"82","severity":1,"message":"83","line":58,"column":7,"nodeType":"84","endLine":58,"endColumn":19,"suggestions":"85"},{"ruleId":"78","severity":1,"message":"86","line":1,"column":26,"nodeType":"80","messageId":"81","endLine":1,"endColumn":35},{"ruleId":"78","severity":1,"message":"87","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":15},{"ruleId":"78","severity":1,"message":"88","line":11,"column":17,"nodeType":"80","messageId":"81","endLine":11,"endColumn":25},{"ruleId":"78","severity":1,"message":"89","line":15,"column":17,"nodeType":"80","messageId":"81","endLine":15,"endColumn":25},{"ruleId":"78","severity":1,"message":"90","line":44,"column":27,"nodeType":"80","messageId":"81","endLine":44,"endColumn":32},{"ruleId":"78","severity":1,"message":"91","line":1,"column":16,"nodeType":"80","messageId":"81","endLine":1,"endColumn":24},{"ruleId":"78","severity":1,"message":"86","line":1,"column":26,"nodeType":"80","messageId":"81","endLine":1,"endColumn":35},{"ruleId":"78","severity":1,"message":"91","line":1,"column":16,"nodeType":"80","messageId":"81","endLine":1,"endColumn":24},{"ruleId":"82","severity":1,"message":"92","line":7,"column":7,"nodeType":"84","endLine":7,"endColumn":9,"suggestions":"93"},{"ruleId":"82","severity":1,"message":"94","line":46,"column":7,"nodeType":"84","endLine":46,"endColumn":19,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["98"],"'useEffect' is defined but never used.","'Request' is defined but never used.","'setTimer' is assigned a value but never used.","'setAudio' is assigned a value but never used.","'entry' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["99"],"React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [showHide, todayState]",{"range":"107","text":"108"},"Update the dependencies array to be: [audio]",{"range":"109","text":"110"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"111","text":"112"},[1713,1725],"[showHide, todayState]",[150,152],"[audio]",[893,905],"[sleep, mood, entry]"]