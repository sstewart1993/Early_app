[{"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js":"1","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js":"2","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js":"3","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"5","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"6","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js":"7","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"8","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js":"9","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"10","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"11","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"13","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"14"},{"size":500,"mtime":1607098809720,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607098809721,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1607457678658,"results":"18","hashOfConfig":"16"},{"size":3204,"mtime":1607511940487,"results":"19","hashOfConfig":"16"},{"size":2342,"mtime":1607457679579,"results":"20","hashOfConfig":"16"},{"size":2110,"mtime":1607513782068,"results":"21","hashOfConfig":"16"},{"size":629,"mtime":1607457679666,"results":"22","hashOfConfig":"16"},{"size":582,"mtime":1607457679611,"results":"23","hashOfConfig":"16"},{"size":625,"mtime":1607471619442,"results":"24","hashOfConfig":"16"},{"size":254,"mtime":1607457679540,"results":"25","hashOfConfig":"16"},{"size":2263,"mtime":1607510983458,"results":"26","hashOfConfig":"16"},{"size":9677,"mtime":1607461931916,"results":"27","hashOfConfig":"16"},{"size":15190,"mtime":1607469112731,"results":"28","hashOfConfig":"16"},{"size":1107,"mtime":1607457679393,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1plwu4b",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/index.js",[],["65","66"],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/App.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MainContainer.js",["67","68"],"import { WindowScrollController } from \"@fullcalendar/react\";\nimport React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport NavBar from \"../components/NavBar\";\nimport DiaryContainer from \"./DiaryContainer\";\nimport EntryContainer from \"./EntryContainer\";\nimport MeditationContainer from \"./MeditationContainer\";\nimport Request from \"../helpers/request\";\n\nconst MainContainer = () => {\n\n    const[todayState, setTodayState] = useState(0);\n\n    const[showHide, setShowHide] = useState(\n        {\n            showMakeEntry:true,\n            showDailyStats:false\n        }\n    )\n\n    const requestToday = function(){\n        const request = new Request();\n        const today = new Date();\n        const todayFormat = `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;\n        const todayPromise = request.get(`/entries/date/${todayFormat}`);\n\n        Promise.all([todayPromise])\n        .then((data) => {\n            if(data[0][0]){\n            setTodayState(data[0][0]);}\n        })\n        .catch()\n    }\n\n\n\n    const handleMakeEntry = function(event){\n        event.preventDefault();\n        window.location=\"/entry\";\n    }\n\n    useEffect( () => {\n        requestToday();\n    },[])\n\n    useEffect(function viewSwitch(){\n\n        if(todayState !== 0) {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = false;\n            showHideCopy['showDailyStats'] = true;\n            setShowHide(showHideCopy);\n        } else {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = true;\n            showHideCopy['showDailyStats'] = false;\n            setShowHide(showHideCopy);\n        }\n    },[todayState])\n\n    const handleStartMeditation = function(event){\n        event.preventDefault();\n        window.location=\"/meditation\";\n    }\n\n    return(\n\n        <Router>\n            <>\n            <NavBar className=\"nav-bar\"/>\n            <div className=\"main-content\">\n            <Switch>\n\n                <Route path=\"/diary\" component={DiaryContainer} />\n\n                <Route path=\"/entry\" render={ () => {\n                    return <EntryContainer todayState={todayState}/>\n                }} />\n\n\n                <Route path=\"/meditation\" render={ () => {\n                    return <MeditationContainer todayState = {todayState} />\n                }} />\n                \n                <Route render={ () => {\n                    return(\n                        <div>\n                        <h2>Good morning!</h2>\n                        {showHide.showMakeEntry ? \n                        <button onClick={handleMakeEntry}>Start your day with an entry</button>\n                        : null }\n\n                        {showHide.showDailyStats ? \n                            <div>\n                            <button onClick={handleStartMeditation}>Would you like to meditate?</button>\n                            </div>\n                            : null }\n                        </div>\n                    )\n                }} />\n\n            </Switch>\n            </div>\n            </>\n        </Router>\n\n    )\n}\n\nexport default MainContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["69","70","71","72"],"import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Request from \"../helpers/request\";\nimport MeditationDisplay from \"../components/Meditation/MeditationDisplay\";\nimport sparrows from \"../assets/sparrows.wav\";\n\n\nconst MeditationContainer = ({todayState}) => {\n\n    const[start,setStart] = useState(0);\n\n    const[incomingState,setIncomingState] = useState([]);\n\n    const audioSparrows = new Audio(sparrows)\n    let sounds = [audioSparrows];\n    const[audio,setAudio] = useState(sounds[0]);\n\n    useEffect( () => {\n        if(todayState === 0){\n            const emptyEntry = {\n            \n                // date: null,\n                sleep: {},\n                mood: {},\n                prompt:\"\",\n                diary: \"\",\n                meditation: {\n                    completed: false,\n                    length: 0\n                }\n        }\n        setIncomingState(emptyEntry);\n\n\n        } else {\n            const newState = {...todayState};\n            setIncomingState(newState);\n        }\n\n        const start = Date.now();\n        setStart(start);\n\n\n    },[todayState])\n\n    const handleUpdate = function(entry) {\n        const request = new Request();\n        console.log(entry);\n        request.patch(\"/entries/\" + entry.id, entry)\n       .then( () => {window.location = \"/\"});\n    }\n\n\n    const findElapsedAndUpdate = function(){\n        const now = Date.now();\n        const elapsedMillis = now - start;\n\n        const elapsedSeconds = elapsedMillis/1000;\n        console.log(elapsedSeconds);\n        const elapsedMins = Math.floor(elapsedSeconds/60);\n        console.log(elapsedMins);\n\n        let stateCopy = {...incomingState};\n        if (elapsedMins > 0) {\n            stateCopy.meditation.completed = true;\n            stateCopy.meditation.length += elapsedMins;\n        } \n        setIncomingState(stateCopy);\n\n        handleUpdate(stateCopy);\n    }\n    \n\n    return(\n\n\n            <MeditationDisplay audio={audio} endMeditation={findElapsedAndUpdate}/>\n\n\n\n    )\n}\n\nexport default MeditationContainer;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["73","74"],"import React, {useState, useEffect} from \"react\";\nimport MeditationDisplay from \"./MeditationDisplay\"\n\n\nconst MeditationSetup = () => {\n\n    return(\n\n        <>\n        <MeditationDisplay />\n\n\n        </>\n        \n    )\n}\n\nexport default MeditationSetup;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["75","76","77","78","79"],"import React, {useState, useEffect} from \"react\";\nimport \"./Animation.css\"\nimport forest from \"../../assets/Forest.jpg\"\nimport ball from \"../../assets/Ball.jpg\"\nimport ball1 from \"../../assets/Ball1.jpg\"\nimport sky from \"../../assets/sky.jpg\"\n\n\n\n\n\nconst MeditationDisplay = ({audio,endMeditation}) => {\n\n    // useEffect( () => {\n    //     audio.play();\n    // },[])\n\n\n    const handleEndMeditation = function(event){\n        event.preventDefault();\n        endMeditation();\n    }\n\n    \n\n    return(\n        <>\n\n        <button onClick={handleEndMeditation} id=\"back-button\">back</button>\n            <audio src={audio} loop />\n            <img className = \"ball\" src={sky} alt=\"ball\" />\n            <p className =\"breath\" id=\"in\">Breath In</p>\n            <p className =\"breath\" id=\"out\">Breath Out</p>\n\n                <div class=\"counter-container\">\n                    <div class=\"min-container\">\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper min2upper\"></div>\n                            <div class=\"digit-lower min2lower\"></div>\n                        </div>\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper min1upper\"></div>\n                            <div class=\"digit-lower min1lower\"></div>\n                        </div>\n                    </div>\n\n                    <div class=\"min-text-container\">\n                        <span class=\"unit\"> Min </span>\n                    </div>\n\n                    <div class=\"sec-container\">\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper sec2upper\"></div>\n                            <div class=\"digit-lower sec2lower\"></div>\n                        </div>\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper sec1upper\"></div>\n                            <div class=\"digit-lower sec1lower\"></div>\n                        </div>\n                    </div>\n\n                <div class=\"sec-text-container\">\n                <span class=\"unit\"> Sec </span>\n                </div>\n            </div>\n\n\n            \n\n        </>\n        \n    )\n}\n\n\n\nexport default MeditationDisplay;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["80"],"import React, {useState, useEffect} from \"react\";\nimport \"./EntryForm.css\";\n\n\nconst EntryForm = ({onCreate}) => {\n\n\n\n    const[entry, setEntry] = useState(\n        {\n            // date: null,\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        const check = event.target.checked;\n        let moodCopy = {...mood};\n        if(check === true){\n            moodCopy[fieldName].push(value);\n        }else{\n            const index = moodCopy[fieldName].indexOf(value);\n            moodCopy[fieldName].splice(index,1);\n        }\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n\n        if(sleep.sleepQuality){\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);}\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <div className=\"entry-form\">\n        <form onSubmit={handleSubmit} >\n            <div style={{display:question[0]}} className=\"question-set\">\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange} required></input>\n                <br/>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange} defaultValue=\"Restful\">\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"No\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}} className=\"question-set\">\n                <label>Did you have any dreams?</label>\n                <br/>\n                <textarea type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream} id=\"dream-box\" rows=\"9\" cols=\"35\"></textarea>\n            </div>\n\n            <div style={{display:question[2]}} className=\"question-set\">\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}} className=\"question-set\">\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}} className=\"question-set\">\n                <label>How do you visualise the rest of the day going?</label>\n                <br/>\n                <textarea type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt} id=\"prompt-box\" rows=\"9\" cols=\"35\"/>\n                <br/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </div>\n    )\n\n}\n\nexport default EntryForm;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",["81"],"import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport \"./EntryDetail.css\";\n\nconst EntryDetail =  ({entry, sleep, mood, onUpdate}) => {\n\n  \n\n    const[stateEntry, setStateEntry] = useState(\n        {\n            // date: null,\n            sleep: {\n            },\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[stateSleep, setStateSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[stateMood,setStateMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( ()=> {\n        // console.log(mood)\n        if(entry){\n        let entryCopy = {...entry}\n        setStateEntry(entryCopy);\n        let moodCopy = {...entry.mood}\n        setStateMood(moodCopy);\n        let dreamCopy = {...entry.sleep};\n        setStateSleep(dreamCopy);}\n    } , [entry, mood, sleep])\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...stateMood}\n        entryCopy[\"sleep\"] = {...stateSleep}\n        setStateEntry(entryCopy);\n    },[stateSleep,stateMood])\n\n\n    if(!entry){\n        return (\n            <p>Loading...</p>\n        )\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let copiedEntry = {...stateEntry}\n        copiedEntry[propertyName] = event.target.value;\n        setStateEntry(copiedEntry)}\n\n    const handleSubmit = function(event){\n        event.preventDefault();\n        let stateEntryCopy = {...stateEntry}\n        // these two lines may be redundant. need to check!\n        stateEntryCopy[\"mood\"] = {...stateMood}\n        stateEntryCopy[\"sleep\"] = {...stateSleep}\n        onUpdate(stateEntryCopy)\n    }\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...stateMood};\n        moodCopy[propertyName] = event.target.value;\n        setStateMood(moodCopy);\n\n        // setStateEntry(prevStateEntry => ({\n        //     ...prevStateEntry, mood: {...prevStateEntry.mood, mood}\n        // }))\n    }\n    \n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...stateSleep};\n        sleepCopy[propertyName] = event.target.value;\n        setStateSleep(sleepCopy);\n\n        // setStateEntry(stateEntry => ({\n        //     ...stateEntry, sleep: {...stateEntry.sleep, sleep}\n        // }))\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let check = event.target.checked;\n        let moodCopy = {...stateMood};\n        if(check === true){\n            moodCopy[fieldName].push(value);\n        }else{\n            const index = moodCopy[fieldName].indexOf(value);\n            moodCopy[fieldName].splice(index,1);\n        }\n        setStateMood(moodCopy);\n    }\n\n    const handleMeditationChange = function(event){\n        let minsMeditated = event.target.value;\n        let entryCopy = {...stateEntry};\n        if(minsMeditated > 0){\n            entryCopy.meditation.completed = true;\n        } else {\n            entryCopy.meditation.completed = false;\n        }\n        entryCopy.meditation.length = minsMeditated;\n        setStateEntry(entryCopy);\n    }\n\n    const mindReasonSelected = stateMood.mindReason;\n    const bodyReasonSelected = stateMood.bodyReason;\n\n    \n    \n    \n    return (\n        <div className = \"entry-detail\">\n        <h1>Your Diary on {entry.date}</h1>\n\n        <form onSubmit={handleSubmit}>\n            <label for=\"prompt\">Prompt: </label>\n            <input type=\"text\" name=\"prompt\" defaultValue={entry.prompt} placeholder={entry.prompt} onChange={handleChange} className=\"prompt\"></input>\n            \n            <div className = \"sleep-info\">\n                <h2>Sleep Info</h2>\n                    <label for=\"dream\">Dream Diary:</label>\n                    <input type=\"text\" name=\"dream\" defaultValue={entry.sleep.dream} placeholder={entry.sleep.dream} onChange={handleSleepChange}></input>\n                    <label for=\"hours\">Hours of Sleep: </label>\n                    <input type=\"number\" name=\"hours\" defaultValue={entry.sleep.hours} placeholder={entry.sleep.hours} onChange={handleSleepChange}></input>\n                    <label>Sleep Quality:</label>\n                    <select select name=\"sleepQuality\" defaultValue={entry.sleep.sleepQuality} onChange={handleSleepChange}>\n                        <option value=\"Restful\">Very Restful</option>\n                        <option value=\"WokeOnce\">I woke up once</option>\n                        <option value=\"WokeTwice\">I woke up twice</option>\n                        <option value=\"RestLess\">I was pretty restless</option>\n                        <option value=\"Bad\">I had a bad night's sleep</option>\n                        <option value=\"No\">I didn't sleep at all</option>\n                    </select>\n                    </div>\n            <div className=\"mood-info\">\n                <h2>Mood Info</h2>\n                    <label>You rated your mind at: {stateEntry.mood.mindScore}/10</label>\n                    <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={stateEntry.mood.mindScore} name=\"mindScore\"/>\n            \n            <h5><label>You checked the following contributing reasons for rating your mind this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n                    {mindReasonSelected.includes(\"Work\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange} checked/>:\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange} /> }\n                        \n                        <label for=\"mind-work\">work</label>\n\n                    {mindReasonSelected.includes(\"Family\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-family\">family</label>\n\n                    {mindReasonSelected.includes(\"Relationship\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-relationship\">relationships</label>\n\n                    {mindReasonSelected.includes(\"Education\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange} />}\n                        \n                        <label for=\"mind-education\">education</label>\n\n                    {mindReasonSelected.includes(\"Food\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-food\">food</label>\n\n                    {mindReasonSelected.includes(\"Travelling\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}  />}\n\n                        \n                        <label for=\"mind-travel\">travel</label>\n\n                    {mindReasonSelected.includes(\"Friends\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange} />}\n        \n                        <label for=\"mind-friends\">friends</label>\n\n                    {mindReasonSelected.includes(\"Exercise\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-exercise\">exercise</label>\n\n                    {mindReasonSelected.includes(\"Body\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}  />}\n\n                        \n                        <label for=\"mind-body\">body</label>\n\n                    {mindReasonSelected.includes(\"Covid\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange} checked/> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange} />}\n\n                        \n                        <label for=\"mind-covid\">covid</label>\n\n                    {mindReasonSelected.includes(\"DontKnow\") ? <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} checked /> :\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} />}\n\n                        <label for=\"mind-dont-know\">I don't know</label>\n\n                    </div>\n\n                <label>You rated your body at: {stateEntry.mood.bodyScore}/10</label>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={stateEntry.mood.bodyScore} name=\"bodyScore\"/>\n            \n            <h5><label>You checked the following contributing reasons for rating your body this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n\n                {bodyReasonSelected.includes(\"Work\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange} checked/> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>}\n                    \n                    <label for=\"body-work\">work</label>\n\n                {bodyReasonSelected.includes(\"Family\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-family\">family</label>\n\n                {bodyReasonSelected.includes(\"Relationship\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-relationship\">relationships</label>\n\n                {bodyReasonSelected.includes(\"Education\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-education\">education</label>\n\n                {bodyReasonSelected.includes(\"Food\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-food\">food</label>\n\n                {bodyReasonSelected.includes(\"Travelling\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange} />}\n                    \n                    <label for=\"body-travel\">travel</label>\n\n                {bodyReasonSelected.includes(\"Friends\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-friends\">friends</label>\n\n                {bodyReasonSelected.includes(\"Exercise\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-exercise\" >exercise</label>\n\n                {bodyReasonSelected.includes(\"Body\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange} />}\n\n                    \n                    <label for=\"body-body\">body</label>\n\n                {bodyReasonSelected.includes(\"Covid\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange} checked /> :\n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-covid\">covid</label>\n\n                {bodyReasonSelected.includes(\"DontKnow\") ? <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} checked/> : \n                <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>}\n\n                    \n                    <label for=\"body-dont-know\">I don't know</label>\n\n                    </div>\n                    </div>\n                <div className =\"meditation-info\">\n            <h2>Meditation Info </h2>\n\n            <label>You meditated for </label>\n            <input type=\"number\" defaultValue={entry.meditation.length} onChange={handleMeditationChange}></input>\n            <label>minutes! </label>\n                \n                </div>\n\n            <button type=\"submit\"> Submit </button>\n        </form>\n        </div>\n    )\n}\n\nexport default EntryDetail;","/Users/home/codeclan_work/project_03/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":32},{"ruleId":"90","severity":1,"message":"91","line":59,"column":7,"nodeType":"92","endLine":59,"endColumn":19,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"94","line":2,"column":26,"nodeType":"88","messageId":"89","endLine":2,"endColumn":32},{"ruleId":"86","severity":1,"message":"95","line":2,"column":34,"nodeType":"88","messageId":"89","endLine":2,"endColumn":39},{"ruleId":"86","severity":1,"message":"96","line":2,"column":41,"nodeType":"88","messageId":"89","endLine":2,"endColumn":47},{"ruleId":"86","severity":1,"message":"97","line":16,"column":17,"nodeType":"88","messageId":"89","endLine":16,"endColumn":25},{"ruleId":"86","severity":1,"message":"98","line":1,"column":16,"nodeType":"88","messageId":"89","endLine":1,"endColumn":24},{"ruleId":"86","severity":1,"message":"99","line":1,"column":26,"nodeType":"88","messageId":"89","endLine":1,"endColumn":35},{"ruleId":"86","severity":1,"message":"98","line":1,"column":16,"nodeType":"88","messageId":"89","endLine":1,"endColumn":24},{"ruleId":"86","severity":1,"message":"99","line":1,"column":26,"nodeType":"88","messageId":"89","endLine":1,"endColumn":35},{"ruleId":"86","severity":1,"message":"100","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"86","severity":1,"message":"101","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":12},{"ruleId":"86","severity":1,"message":"102","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":13},{"ruleId":"90","severity":1,"message":"103","line":45,"column":7,"nodeType":"92","endLine":45,"endColumn":19,"suggestions":"104"},{"ruleId":"90","severity":1,"message":"103","line":57,"column":7,"nodeType":"92","endLine":57,"endColumn":29,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'setAudio' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'forest' is defined but never used.","'ball' is defined but never used.","'ball1' is defined but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["109"],["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [showHide, todayState]",{"range":"117","text":"118"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"119","text":"120"},"Update the dependencies array to be: [stateSleep, stateMood, entry]",{"range":"121","text":"122"},[1739,1751],"[showHide, todayState]",[866,878],"[sleep, mood, entry]",[1291,1313],"[stateSleep, stateMood, entry]"]