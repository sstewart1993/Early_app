[{"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/index.js":"1","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/reportWebVitals.js":"2","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/App.js":"3","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MainContainer.js":"4","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MeditationContainer.js":"5","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/EntryContainer.js":"6","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/NavBar.js":"7","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/DiaryContainer.js":"8","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js":"9","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/helpers/request.js":"10","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js":"11","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js":"12","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx":"13","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx":"14"},{"size":500,"mtime":1607098648483,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607098648484,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1607352440194,"results":"18","hashOfConfig":"16"},{"size":2956,"mtime":1607352522804,"results":"19","hashOfConfig":"16"},{"size":1078,"mtime":1607192527797,"results":"20","hashOfConfig":"16"},{"size":582,"mtime":1607352522803,"results":"21","hashOfConfig":"16"},{"size":606,"mtime":1607352522802,"results":"22","hashOfConfig":"16"},{"size":2342,"mtime":1607444957797,"results":"23","hashOfConfig":"16"},{"size":254,"mtime":1607384853123,"results":"24","hashOfConfig":"16"},{"size":629,"mtime":1607192527797,"results":"25","hashOfConfig":"16"},{"size":2066,"mtime":1607384853123,"results":"26","hashOfConfig":"16"},{"size":9465,"mtime":1607440448112,"results":"27","hashOfConfig":"16"},{"size":1107,"mtime":1607384853122,"results":"28","hashOfConfig":"16"},{"size":10090,"mtime":1607448923554,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mwr5qr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/index.js",[],["66","67"],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/reportWebVitals.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/App.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MainContainer.js",["68","69"],"import { WindowScrollController } from \"@fullcalendar/react\";\nimport React, {useState,useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport NavBar from \"../components/NavBar\";\nimport DiaryContainer from \"./DiaryContainer\";\nimport EntryContainer from \"./EntryContainer\";\nimport MeditationContainer from \"./MeditationContainer\";\nimport Request from \"../helpers/request\";\n\nconst MainContainer = () => {\n\n    const[todayState, setTodayState] = useState([]);\n\n    const[showHide, setShowHide] = useState(\n        {\n            showMakeEntry:true,\n            showDailyStats:false\n        }\n    )\n\n    const requestToday = function(){\n        const request = new Request();\n        const today = new Date();\n        const todayFormat = `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;\n        const todayPromise = request.get(`/entries/date/${todayFormat}`);\n\n        Promise.all([todayPromise])\n        .then((data) => {\n            setTodayState(data[0]);\n        })\n        .catch()\n    }\n\n\n\n    const handleMakeEntry = function(event){\n        event.preventDefault();\n        window.location=\"/entry\";\n    }\n\n    useEffect( () => {\n        requestToday();\n    },[])\n\n    useEffect(function viewSwitch(){\n\n        if(todayState.length > 0) {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = false;\n            showHideCopy['showDailyStats'] = true;\n            setShowHide(showHideCopy);\n        } else {\n            let showHideCopy = {...showHide}\n            showHideCopy['showMakeEntry'] = true;\n            showHideCopy['showDailyStats'] = false;\n            setShowHide(showHideCopy);\n        }\n    },[todayState])\n\n    return(\n\n        <Router>\n            <>\n            <NavBar className=\"nav-bar\"/>\n            <div className=\"main-content\">\n            <Switch>\n\n                <Route path=\"/diary\" component={DiaryContainer} />\n\n                <Route path=\"/entry\" render={ () => {\n                    return <EntryContainer todayState={todayState}/>\n                }} />\n\n\n                <Route path=\"/meditation\" component={MeditationContainer} />\n                <Route render={ () => {\n                    return(\n                        <div>\n                        <h2>Good morning!</h2>\n                        {showHide.showMakeEntry ? \n                        <button onClick={handleMakeEntry}>Start your day with an entry</button>\n                        : null }\n\n                        {showHide.showDailyStats ? \n                            <div>\n                            <h3>Here are your daily stats: </h3>\n                            <p>blah blah</p>\n                            </div>\n                            : null }\n                        </div>\n                    )\n                }} />\n\n            </Switch>\n            </div>\n            </>\n        </Router>\n\n    )\n}\n\nexport default MainContainer;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/MeditationContainer.js",["70","71","72","73"],"import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Request from \"../helpers/request\";\nimport MeditationSetup from \"../components/Meditation/MeditationSetup\";\nimport MeditationDisplay from \"../components/Meditation/MeditationDisplay\";\nimport sparrows from \"../assets/sparrows.wav\";\n\n\nconst MeditationContainer = () => {\n\n    const[timer,setTimer] = useState(0);\n\n    const audioSparrows = new Audio(sparrows)\n    let sounds = [audioSparrows];\n    const[audio,setAudio] = useState(sounds[0]);\n    \n\n    return(\n        // set up screen (choose length, audio, video)\n        // meditation screen\n\n        <Router>\n            <>\n            <Switch>\n\n            <Route path=\"/meditation/start\" render={ () => {\n                return <MeditationDisplay length={timer} audio={audio}/>\n            }}/>\n\n            <Route render={ () => {\n                return <MeditationSetup />\n            }}/>\n\n            </Switch>\n            </>\n        </Router>\n\n\n    )\n}\n\nexport default MeditationContainer;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/EntryContainer.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/NavBar.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/containers/DiaryContainer.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationSetup.js",["74","75"],"import React, {useState, useEffect} from \"react\";\nimport MeditationDisplay from \"./MeditationDisplay\"\n\n\nconst MeditationSetup = () => {\n\n    return(\n\n        <>\n        <MeditationDisplay />\n\n\n        </>\n        \n    )\n}\n\nexport default MeditationSetup;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/helpers/request.js",[],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Meditation/MeditationDisplay.js",["76","77","78","79","80"],"import React, {useState, useEffect} from \"react\";\nimport \"./Animation.css\"\nimport forest from \"../../assets/Forest.jpg\"\nimport ball from \"../../assets/Ball.jpg\"\nimport ball1 from \"../../assets/Ball1.jpg\"\nimport sky from \"../../assets/sky.jpg\"\n\n\n\n\n\nconst MeditationDisplay = ({timer,audio}) => {\n\n    // useEffect( () => {\n    //     audio.play();\n    // },[])\n\n\n\n\n    \n\n    return(\n        <>\n            <audio src={audio} loop />\n            <img className = \"ball\" src={sky} alt=\"ball\" />\n            <p className =\"breath\" id=\"in\">Breath In</p>\n            <p className =\"breath\" id=\"out\">Breath Out</p>\n\n                <div class=\"counter-container\">\n                    <div class=\"min-container\">\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper min2upper\"></div>\n                            <div class=\"digit-lower min2lower\"></div>\n                        </div>\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper min1upper\"></div>\n                            <div class=\"digit-lower min1lower\"></div>\n                        </div>\n                    </div>\n\n                    <div class=\"min-text-container\">\n                        <span class=\"unit\"> Min </span>\n                    </div>\n\n                    <div class=\"sec-container\">\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper sec2upper\"></div>\n                            <div class=\"digit-lower sec2lower\"></div>\n                        </div>\n                        <div class=\"digit-container\">\n                            <div class=\"digit-upper sec1upper\"></div>\n                            <div class=\"digit-lower sec1lower\"></div>\n                        </div>\n                    </div>\n\n                <div class=\"sec-text-container\">\n                <span class=\"unit\"> Sec </span>\n                </div>\n            </div>\n\n\n            \n\n        </>\n        \n    )\n}\n\n\n\nexport default MeditationDisplay;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryForm.js",["81"],"import React, {useState, useEffect} from \"react\";\nimport \"./EntryForm.css\";\n\n\nconst EntryForm = ({onCreate}) => {\n\n\n\n    const[entry, setEntry] = useState(\n        {\n            // date: null,\n            sleep: {},\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[sleep,setSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[mood,setMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setEntry(entryCopy);\n    },[sleep,mood])\n\n    const[buttonDisplay, setButtonDisplay] = useState(\"\")\n\n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setSleep(sleepCopy);\n    }\n\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setMood(moodCopy);\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let entryCopy = {...entry};\n        entryCopy[propertyName] = event.target.value;\n        setEntry(entryCopy);\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        let moodCopy = {...mood};\n        moodCopy[fieldName].push(value);\n        setMood(moodCopy);\n    }\n\n    const[question, setQuestion] = useState(\n        [\"block\",\"none\",\"none\",\"none\",\"none\"]\n    )\n\n    const nextQuestion = function(event) {\n        event.preventDefault();\n\n        if(sleep.sleepQuality){\n        let questionCopy = [...question];\n\n        if (question.indexOf(\"block\") === 3 ){\n            setButtonDisplay(\"none\");\n        }\n\n       const questionIndex = question.indexOf(\"block\");\n       questionCopy[questionIndex] = \"none\";\n       questionCopy[(questionIndex+1)] = \"block\";\n       setQuestion(questionCopy);}\n    }\n\n    const handleSubmit = function(event) {\n        event.preventDefault();\n        onCreate(entry);\n    }\n\n\n\n    return(\n        <div className=\"entry-form\">\n        <form onSubmit={handleSubmit} >\n            <div style={{display:question[0]}} className=\"question-set\">\n                <label>How many hours did you sleep for?</label>\n                <input name=\"hours\" type=\"number\" value={sleep.hours} onChange={handleSleepChange} required></input>\n                <br/>\n                <label>How was your sleep quality?</label>\n                <select name=\"sleepQuality\" onChange={handleSleepChange} defaultValue=\"Restful\">\n                    <option value=\"Restful\">Restful</option>\n                    <option value=\"WokeOnce\">I woke up once</option>\n                    <option value=\"WokeTwice\">I woke up twice</option>\n                    <option value=\"RestLess\">I was pretty restless</option>\n                    <option value=\"Bad\">I slept really badly</option>\n                    <option value=\"No\">I got no sleep at all</option>\n                </select>\n            </div>\n\n            <div style={{display:question[1]}} className=\"question-set\">\n                <label>Did you have any dreams?</label>\n                <br/>\n                <textarea type=\"text\" name=\"dream\" onChange={handleSleepChange} value={sleep.dream} id=\"dream-box\" rows=\"9\" cols=\"35\"></textarea>\n            </div>\n\n            <div style={{display:question[2]}} className=\"question-set\">\n                <label>How does your body feel today?</label>\n                <p>{mood.bodyScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.bodyScore} name=\"bodyScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[3]}} className=\"question-set\">\n            <label>How does your mind feel today?</label>\n                <p>{mood.mindScore}/10</p>\n                <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={mood.mindScore} name=\"mindScore\"/>\n                <br/>\n                <label>What's the reason?</label>\n                \n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange}/>\n                    <label for=\"mind-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange}/>\n                    <label for=\"mind-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange}/>\n                    <label for=\"mind-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange}/>\n                    <label for=\"mind-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"mind-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}/>\n                    <label for=\"mind-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange}/>\n                    <label for=\"mind-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"mind-exercise\">exercise</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}/>\n                    <label for=\"mind-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"mind-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"mind-dont-know\">I don't know</label>\n\n                </div>\n\n            </div>\n\n            <div style={{display:question[4]}} className=\"question-set\">\n                <label>How do you visualise the rest of the day going?</label>\n                <br/>\n                <textarea type=\"text\" required onChange={handleChange} name=\"prompt\" value={entry.prompt} id=\"prompt-box\" rows=\"9\" cols=\"35\"/>\n                <br/>\n                <input type=\"submit\"/>\n            </div> \n\n\n        </form>\n        <button onClick={nextQuestion} style={{display:buttonDisplay}}>next</button>\n        </div>\n    )\n\n}\n\nexport default EntryForm;","/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Diary/DiaryDisplay.jsx",[],["82","83"],"/Users/madeleinewood/mindfulness/mindfullness_app/frontEnd/src/components/Entry/EntryDetail.jsx",["84","85","86","87","88"],"import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport \"../Entry/EntryDetail.css\";\n\nconst EntryDetail =  ({entry, sleep, mood, onUpdate}) => {\n\n  \n\n    const[stateEntry, setStateEntry] = useState(\n        {\n            // date: null,\n            sleep: {\n            },\n            mood: {},\n            prompt:\"\",\n            diary: {id:1},\n            meditation: {\n                completed: false,\n                length: 0\n            }\n        }\n    )\n\n    const[stateSleep, setStateSleep] = useState(\n       {\n        hours:0,\n        sleepQuality:\"\",\n        dream:\"\" \n       } \n    )\n\n    const[stateMood,setStateMood] = useState(\n        {\n            mindScore:0,\n            bodyScore:0,\n            mindReason:[],\n            bodyReason:[]\n        }\n    )\n\n    useEffect( ()=> {\n        // console.log(mood)\n        if(entry){\n        let entryCopy = {...entry}\n        setStateEntry(entryCopy);\n        let moodCopy = {...entry.mood}\n        setStateMood(moodCopy);\n        let dreamCopy = {...entry.sleep};\n        setStateSleep(dreamCopy);}\n    } , [entry, mood, sleep])\n\n    useEffect( () => {\n        let entryCopy = {...entry}\n        entryCopy[\"mood\"] = {...mood}\n        entryCopy[\"sleep\"] = {...sleep}\n        setStateEntry(entryCopy);\n    },[stateSleep,stateMood])\n\n\n    if(!entry){\n        return (\n            <p>Loading...</p>\n        )\n    }\n\n    const handleChange = function(event){\n        let propertyName = event.target.name;\n        let copiedEntry = {...stateEntry}\n        copiedEntry[propertyName] = event.target.value;\n        setStateEntry(copiedEntry)}\n\n    const handleSubmit = function(event){\n        event.preventDefault();\n        let stateEntryCopy = {...stateEntry}\n        stateEntryCopy[\"mood\"] = {...mood}\n        stateEntryCopy[\"sleep\"] = {...sleep}\n        onUpdate(stateEntryCopy)\n    }\n\n    const handleMoodChange = function(event){\n        let propertyName = event.target.name;\n        let moodCopy = {...mood};\n        moodCopy[propertyName] = event.target.value;\n        setStateMood(moodCopy);\n\n        setStateEntry(prevStateEntry => ({\n            ...prevStateEntry, mood: {...prevStateEntry.mood, mood}\n        }))\n    }\n    \n    const handleSleepChange = function(event){\n        let propertyName = event.target.name;\n        let sleepCopy = {...sleep};\n        sleepCopy[propertyName] = event.target.value;\n        setStateSleep(sleepCopy);\n\n        setStateEntry(stateEntry => ({\n            ...stateEntry, sleep: {...stateEntry.sleep, sleep}\n        }))\n    }\n\n    const handleReasonChange = function(event){\n        let fieldName = event.target.name;\n        let value = event.target.value;\n        \n        \n        \n        // setMood(moodCopy);\n    }\n\n    const mindReasonSelected = stateMood.mindReason;\n    const bodyReasonSelected = stateMood.bodyReason;\n\n    \n    \n    \n    return (\n        <>\n        <h1>Your Diary on {entry.date}</h1>\n\n        <form onSubmit={handleSubmit} className = \"entryDetail\">\n            <label for=\"prompt\">Prompt: </label>\n            <input type=\"text\" name=\"prompt\" defaultValue={entry.prompt} placeholder={entry.prompt} onChange={handleChange} className=\"Prompt\"></input>\n            \n            <div className = \"sleep-info\">\n                <h2>Sleep Info</h2>\n                    <label for=\"dream\">Dream Diary:</label>\n                    <input type=\"text\" name=\"dream\" defaultValue={entry.sleep.dream} placeholder={entry.sleep.dream} onChange={handleSleepChange}></input>\n                    <label for=\"sleephours\">Hours of Sleep: </label>\n                    <input type=\"number\" name=\"sleep-hours\" defaultValue={entry.sleep.hours} placeholder={entry.sleep.hours} onChange={handleSleepChange}></input>\n                    <label>Sleep Quality:</label>\n                    <select select name=\"sleepQuality\" defaultValue={entry.sleep.sleepQuality} onChange={handleSleepChange}>\n                        <option value=\"Restful\">Very Restful</option>\n                        <option value=\"WokeOnce\">I woke up once</option>\n                        <option value=\"WokeTwice\">I woke up twice</option>\n                        <option value=\"Restless\">I was pretty restless</option>\n                        <option value=\"Bad\">I had a bad night's sleep</option>\n                        <option value=\"No\">I didn't sleep at all</option>\n                    </select>\n                    </div>\n            <div className=\"mood-info\">\n                <h2>Mood Info</h2>\n                    <label>You rated your mind at:</label>\n                    <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={entry.mood.mindScore} name=\"mindScore\"/>\n            \n            <h5><label className>You checked the following contributing reasons for rating your mind this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-work\" value=\"Work\" onChange={handleReasonChange} />\n                        <label for=\"mind-work\">work</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-family\" value=\"Family\" onChange={handleReasonChange} />\n                        <label for=\"mind-family\">family</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-relationship\" value=\"Relationship\" onChange={handleReasonChange} />\n                        <label for=\"mind-relationship\">relationships</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-education\" value=\"Education\" onChange={handleReasonChange} />\n                        <label for=\"mind-education\">education</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-food\" value=\"Food\" onChange={handleReasonChange} />\n                        <label for=\"mind-food\">food</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-travel\" value=\"Travelling\" onChange={handleReasonChange}  />\n                        <label for=\"mind-travel\">travel</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-friends\" value=\"Friends\" onChange={handleReasonChange} />\n                        <label for=\"mind-friends\">friends</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-exercise\" value=\"Exercise\" onChange={handleReasonChange} />\n                        <label for=\"mind-exercise\">exercise</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-body\" value=\"Body\" onChange={handleReasonChange}  />\n                        <label for=\"mind-body\">body</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-covid\" value=\"Covid\" onChange={handleReasonChange} />\n                        <label for=\"mind-covid\">covid</label>\n\n                        <input type=\"checkbox\" name=\"mindReason\" id=\"mind-dont-know\" value=\"DontKnow\" onChange={handleReasonChange} />\n                        <label for=\"mind-dont-know\">I don't know</label>\n\n                    </div>\n\n                <label>You rated your body at:</label>\n                {/* <input type=\"range\" min=\"1\" max=\"10\" onChange={handleMoodChange} value={entry.mood.bodyScore} name=\"bodyScore\" defaultValue={mood.bodyscore}/> */}\n            \n            <h5><label className>You checked the following contributing reasons for rating your body this way: </label></h5>\n\n                <div className=\"reason-checkboxes\">\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-work\" value=\"Work\" onChange={handleReasonChange} />\n                    <label for=\"body-work\">work</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-family\" value=\"Family\" onChange={handleReasonChange} />\n                    <label for=\"body-family\">family</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-relationship\" value=\"Relationship\" onChange={handleReasonChange} />\n                    <label for=\"body-relationship\">relationships</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-education\" value=\"Education\" onChange={handleReasonChange} />\n                    <label for=\"body-education\">education</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-food\" value=\"Food\" onChange={handleReasonChange}/>\n                    <label for=\"body-food\">food</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-travel\" value=\"Travelling\" onChange={handleReasonChange} />\n                    <label for=\"body-travel\">travel</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-friends\" value=\"Friends\" onChange={handleReasonChange} />\n                    <label for=\"body-friends\">friends</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-exercise\" value=\"Exercise\" onChange={handleReasonChange}/>\n                    <label for=\"body-exercise\" >exercise</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-body\" value=\"Body\" onChange={handleReasonChange} />\n                    <label for=\"body-body\">body</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-covid\" value=\"Covid\" onChange={handleReasonChange}/>\n                    <label for=\"body-covid\">covid</label>\n\n                    <input type=\"checkbox\" name=\"bodyReason\" id=\"body-dont-know\" value=\"DontKnow\" onChange={handleReasonChange}/>\n                    <label for=\"body-dont-know\">I don't know</label>\n\n                    </div>\n                    </div>\n                <div className =\"meditation-info\">\n            <h2>Meditation Info </h2>\n\n            <label>You meditated for </label>\n            <input type=\"number\" defaultValue={entry.meditation.length} onchange={handleChange}></input>\n            <label>minutes! </label>\n                \n                </div>\n\n            <button type=\"submit\"> Submit </button>\n        </form>\n        </>\n    )\n}\n\nexport default EntryDetail;",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":1,"column":10,"nodeType":"95","messageId":"96","endLine":1,"endColumn":32},{"ruleId":"97","severity":1,"message":"98","line":58,"column":7,"nodeType":"99","endLine":58,"endColumn":19,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"101","line":1,"column":26,"nodeType":"95","messageId":"96","endLine":1,"endColumn":35},{"ruleId":"93","severity":1,"message":"102","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":15},{"ruleId":"93","severity":1,"message":"103","line":11,"column":17,"nodeType":"95","messageId":"96","endLine":11,"endColumn":25},{"ruleId":"93","severity":1,"message":"104","line":15,"column":17,"nodeType":"95","messageId":"96","endLine":15,"endColumn":25},{"ruleId":"93","severity":1,"message":"105","line":1,"column":16,"nodeType":"95","messageId":"96","endLine":1,"endColumn":24},{"ruleId":"93","severity":1,"message":"101","line":1,"column":26,"nodeType":"95","messageId":"96","endLine":1,"endColumn":35},{"ruleId":"93","severity":1,"message":"105","line":1,"column":16,"nodeType":"95","messageId":"96","endLine":1,"endColumn":24},{"ruleId":"93","severity":1,"message":"101","line":1,"column":26,"nodeType":"95","messageId":"96","endLine":1,"endColumn":35},{"ruleId":"93","severity":1,"message":"106","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"93","severity":1,"message":"107","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":12},{"ruleId":"93","severity":1,"message":"108","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":13},{"ruleId":"97","severity":1,"message":"109","line":45,"column":7,"nodeType":"99","endLine":45,"endColumn":19,"suggestions":"110"},{"ruleId":"89","replacedBy":"111"},{"ruleId":"91","replacedBy":"112"},{"ruleId":"97","severity":1,"message":"113","line":57,"column":7,"nodeType":"99","endLine":57,"endColumn":29,"suggestions":"114"},{"ruleId":"93","severity":1,"message":"115","line":103,"column":13,"nodeType":"95","messageId":"96","endLine":103,"endColumn":22},{"ruleId":"93","severity":1,"message":"116","line":104,"column":13,"nodeType":"95","messageId":"96","endLine":104,"endColumn":18},{"ruleId":"93","severity":1,"message":"117","line":111,"column":11,"nodeType":"95","messageId":"96","endLine":111,"endColumn":29},{"ruleId":"93","severity":1,"message":"118","line":112,"column":11,"nodeType":"95","messageId":"96","endLine":112,"endColumn":29},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'WindowScrollController' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showHide'. Either include it or remove the dependency array.","ArrayExpression",["121"],"'useEffect' is defined but never used.","'Request' is defined but never used.","'setTimer' is assigned a value but never used.","'setAudio' is assigned a value but never used.","'useState' is defined but never used.","'forest' is defined but never used.","'ball' is defined but never used.","'ball1' is defined but never used.","React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["122"],["119"],["120"],"React Hook useEffect has missing dependencies: 'entry', 'mood', and 'sleep'. Either include them or remove the dependency array.",["123"],"'fieldName' is assigned a value but never used.","'value' is assigned a value but never used.","'mindReasonSelected' is assigned a value but never used.","'bodyReasonSelected' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [showHide, todayState]",{"range":"130","text":"131"},"Update the dependencies array to be: [sleep, mood, entry]",{"range":"132","text":"133"},"Update the dependencies array to be: [stateSleep, stateMood, entry, mood, sleep]",{"range":"134","text":"135"},[1713,1725],"[showHide, todayState]",[866,878],"[sleep, mood, entry]",[1288,1310],"[stateSleep, stateMood, entry, mood, sleep]"]